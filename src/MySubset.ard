\import Logic
\import Set.Subset

--\func Subset (U : \Set) => U -> \Prop

\func empty {U : \Set} : Set U => \lam _ => Empty

\func \infix 9 in' {U : \Set} (x : U) (s : Set U) => s x

\func union {U : \Set} (A B : Set U) : Set U => \lam x => x in' A || x in' B

\func empty-included {U : \Set} (A : Set U) : empty ⊆ A
  => \lam {x} e => absurd e
--\func contained-bool {U : DecSet} (l : Array U) (x : U) : Bool
--  => fold (\lam a b => decToBool (decideEq a x) or b) false l

--\func contained {U : \Set} (l : Array U) (x : U) : \Prop => fold (\lam a b => (a = x) || b) Empty l

--\func \infix 7 sub {U : \Set} (A B : Subset U) : \Prop => \Pi (u : U) -> u in' A -> u in' B

\func \infixl 5 add {U : \Set} (A : Set U) (x : U) => union A (single x)

\func add-monotone {U : \Set} (A B : Set U) (x : U) (s : A ⊆ B) : (A add x) ⊆ (B add x) =>
  \lam {el} a => \case\elim a \with {
    | byLeft a => byLeft (s a)
    | byRight b => byRight b
  }

\func add-increasing {U : \Set} {A : Set U} {x : U} : A ⊆ (A add x) =>
  \lam {_} s => byLeft s

\func add-increasing' {U : \Set} {A : Set U} {x : U} : single x ⊆ A add x
  => \lam {_} s => byRight s

--\func add-increasing' {U : \Set} (x y : U) : single y ⊆ (single x add y) =>
--  add-increasing''