\import Logic
\import Logic.FirstOrder.Term
\import Logic.IntuitionisticProp.AbstractLogic (SingleSortedSignature, Logic)
\import Logic.IntuitionisticProp.MySubset
\import Relation.Equivalence

\data Connectives
  | :==>
  | :or
  | :and
  | :bottom

--- Intuitionistic Propositional Logic Signature

\instance IPL-Signature : SingleSortedSignature
  | Sort => \Sigma
  | Symb _ => Connectives
  | arity x => \case\elim x \with {
    | :==> => 2
    | :or => 2
    | :and => 2
    | :bottom => 0
  }

\func IPL-Term => Term {IPL-Signature} (\lam _ => Nat) ()


-- Natural deduction

\truncated \data IPL-Proof (Gamma : Subset IPL-Term) (result : IPL-Term) : \Prop
\elim result
  | apply :and (phi :: psi :: nil) => and-intro (IPL-Proof Gamma phi) (IPL-Proof Gamma psi)
  | apply :or (phi :: _ :: nil) => or-intro-left (IPL-Proof Gamma phi)
  | apply :or (_ :: psi :: nil) => or-intro-right (IPL-Proof Gamma psi)
  | apply :==> (phi :: psi :: nil) => impl-intro (IPL-Proof (Gamma add phi) psi)

  | phi => and-elim-left {psi : IPL-Term} (IPL-Proof Gamma (apply :and (phi :: psi :: nil)))
  | psi => and-elim-right {phi : IPL-Term} (IPL-Proof Gamma (apply :and (phi :: psi :: nil)))
  | ro => or-elim (phi psi : IPL-Term)
                  (IPL-Proof (Gamma add phi) ro)
                  (IPL-Proof (Gamma add psi) ro)
                  (IPL-Proof Gamma (apply :or (phi :: psi :: nil)))
  | psi => modus-ponens (phi : IPL-Term) (IPL-Proof Gamma (apply :==> (phi :: psi :: nil))) (IPL-Proof Gamma phi)
  | phi => absurd (IPL-Proof Gamma (apply :bottom nil))
  | phi => identity (Gamma phi)

\func \infixl 6 -or (x y : IPL-Term) : IPL-Term => apply :or (x :: y :: nil)

\func \infixl 7 -and (x y : IPL-Term) : IPL-Term => apply :and (x :: y :: nil)

\func \infixl 8 -impl (x y : IPL-Term) : IPL-Term => apply :==> (x :: y :: nil)

\func -bottom : IPL-Term => apply :bottom nil

\func \infix 5 derives (phi psi : IPL-Term) => IPL-Proof (single phi) psi

-- Monotonicity

\func monotonicity {Gamma Delta : Subset IPL-Term} (s : Gamma sub Delta) {x : IPL-Term} (p : IPL-Proof Gamma x)
  : IPL-Proof Delta x \elim x, p
  | apply :and (phi :: (psi :: nil)), and-intro p1 p2
  => and-intro (monotonicity s p1) (monotonicity s p2)
  | apply :or (phi :: (a :: nil)), or-intro-left p => or-intro-left (monotonicity s p)
  | apply :or (a :: (psi :: nil)), or-intro-right p => or-intro-right (monotonicity s p)
  | apply :==> (phi :: (psi :: nil)), impl-intro p => impl-intro (monotonicity (add-monotone Gamma Delta phi s) p)
  | y, and-elim-left p => and-elim-left (monotonicity s p)
  | x, and-elim-right p => and-elim-right (monotonicity s p)
  | x, or-elim phi psi p1 p2 p3 => or-elim phi psi
      (monotonicity  (add-monotone Gamma Delta phi s) p1)
      (monotonicity  (add-monotone Gamma Delta psi s) p2)
      (monotonicity s p3)
  | x, modus-ponens phi p1 p2 => modus-ponens phi (monotonicity s p1) (monotonicity s p2)
  | x, absurd p => absurd (monotonicity s p)
  | y, identity x => identity (s y x)

\func monotonicity-lemma {x y z : IPL-Term} (y<=z : y derives z) : IPL-Proof (single y add x) z =>
  monotonicity (add-increasing (single y) x) y<=z

\func monotonicity-lemma' {x y z : IPL-Term} (y<=z : y derives z) : IPL-Proof (single x add y) z =>
  monotonicity (add-increasing' x y) y<=z

\func simple-transit {x y z : IPL-Term} (p : x derives y) (q : y derives z) : x derives z =>
  modus-ponens y (impl-intro (monotonicity-lemma' q)) p

\func LindenbaumSet => Quotient {IPL-Term} (\lam phi psi => \Sigma (phi derives psi) (psi derives phi))

\func \infix 9 derives' (a b : LindenbaumSet) : \Prop \elim a, b
  | in~ x, in~ y => x derives y
  | in~ a, ~-equiv x y (x<=y, y<=x) => propExt (\lam a<=x => a<=x `simple-transit` x<=y) (\lam a<=y => a<=y `simple-transit` y<=x)
  | ~-equiv x y (x<=y, y<=x), in~ a => propExt (\lam x<=a => y<=x `simple-transit` x<=a) (\lam y<=a => x<=y `simple-transit` y<=a)

\func and-is-comm {x y : IPL-Term} : x -and y derives y -and x =>
  and-intro (and-elim-right (identity idp)) (and-elim-left (identity idp))

\func and-is-monotone {a x y : IPL-Term} (x<=y : x derives y) : a -and x derives a -and y =>
  and-intro (and-elim-left (identity idp)) (and-elim-right (identity idp) `simple-transit` x<=y)

\func and-is-monotone' {a x y : IPL-Term} (x<=y : x derives y) : x -and a derives y -and a =>
  and-is-comm `simple-transit` and-is-monotone x<=y `simple-transit` and-is-comm

\func or-is-comm {x y : IPL-Term} : x -or y derives y -or x =>
  or-elim x y (or-intro-right (identity (byRight idp))) (or-intro-left (identity (byRight idp))) (identity idp)

\func or-is-monotone {a x y : IPL-Term} (x<=y : x derives y) : a -or x derives a -or y =>
  or-elim a x (or-intro-left (identity (byRight idp)))
      (or-intro-right (monotonicity-lemma' x<=y))
      (identity idp)

\func impl-intro-general {Gamma : Subset IPL-Term} {x y : IPL-Term} (x<=y : x derives y) : IPL-Proof Gamma (x -impl y) =>
  impl-intro (monotonicity (\lam u u=x => byRight u=x) x<=y)

\func or-is-monotone' {a x y : IPL-Term} (x<=y : x derives y) : x -or a derives y -or a =>
  or-is-comm `simple-transit` or-is-monotone x<=y `simple-transit` or-is-comm

\func impl-is-monotone {a x y : IPL-Term} (x<=y : x derives y) : a -impl x derives a -impl y =>
  impl-intro (modus-ponens a (impl-intro lemma'') (identity (byRight idp))) \where {
  \func lemma : IPL-Proof (single (a -impl x) add a) x =>
    modus-ponens a (identity (byLeft idp)) (identity (byRight idp))

  \func lemma' : IPL-Proof ((single (a -impl x) add a) add a) x =>
    monotonicity (add-increasing (single (a -impl x) add a) a) lemma

  \func lemma'' : IPL-Proof ((single (a -impl x) add a) add a) y =>
    modus-ponens x (impl-intro-general x<=y) lemma'
}

\func impl-is-antimono {a x y : IPL-Term} (x<=y : x derives y) : y -impl a derives x -impl a =>
  impl-intro (modus-ponens y lemma' lemma)
  \where {
    \func lemma : IPL-Proof (single (y -impl a) add x) y =>
      monotonicity (\lam u x=u => byRight x=u) x<=y

    \func lemma' : IPL-Proof (single (y -impl a) add x) (y -impl a) =>
      identity (byLeft idp)
  }

\func transitivity {gamma delta : Subset IPL-Term} {phi : IPL-Term}
                   (g-to-d : \Pi (psi : IPL-Term) -> psi in' gamma -> IPL-Proof delta psi) (gamma-impl-phi : IPL-Proof gamma phi)
  : IPL-Proof delta phi
\elim phi, gamma-impl-phi
  | apply :and (phi :: (psi :: nil)), and-intro g-impl-phi g-impl-psi =>
    and-intro (transitivity g-to-d g-impl-phi) (transitivity g-to-d g-impl-psi)
  | apply :or (phi :: (a :: nil)), or-intro-left g-impl-phi =>
    or-intro-left (transitivity g-to-d g-impl-phi)
  | apply :or (a :: (psi :: nil)), or-intro-right g-impl-psi =>
    or-intro-right (transitivity g-to-d g-impl-psi)
  | apply :==> (phi :: (psi :: nil)), impl-intro g-phi-impl-psi =>
    impl-intro (lemma g-phi-impl-psi)
  | phi, and-elim-left g-impl-phi => and-elim-left (transitivity g-to-d g-impl-phi)
  | phi, and-elim-right g-impl-phi => and-elim-right (transitivity g-to-d g-impl-phi)
  | phi, or-elim x psi g-x-impl-phi g-psi-impl-phi g-impl-x-or-phi =>
    or-elim x psi (lemma g-x-impl-phi) (lemma g-psi-impl-phi) (transitivity g-to-d g-impl-x-or-phi)
  | phi, modus-ponens x g|-impl-x=>phi g-impl-x => modus-ponens x (transitivity g-to-d g|-impl-x=>phi)
      (transitivity g-to-d g-impl-x)
  | phi, absurd gamma-impl-bottom => absurd (transitivity g-to-d gamma-impl-bottom)
  | phi, identity phi-in-gamma => g-to-d phi phi-in-gamma
  \where {
    \func lemma {phi psi : IPL-Term} (g-phi-impl-psi : IPL-Proof (gamma add phi) psi) : IPL-Proof (delta add phi) psi =>
      transitivity (\lam x x-in-g-or-phi => \case x-in-g-or-phi \with {
        | byLeft in-g => monotonicity (add-increasing delta phi) (g-to-d x in-g)
        | byRight x-is-phi => identity (byRight x-is-phi)
      }) g-phi-impl-psi
  }

-- todo: prove structurality for IPC
--\func structurality {subst : LangHom {IPL-Signature}} {gamma : Subset IPL-Term} (phi : IPL-Term) (g|-phi : IPL-Proof gamma phi)
--  : IPL-Proof (\lam l => TruncP (\Sigma (psi : Language) (subst psi = l) (IPL-Proof gamma phi))) (subst phi)
--\elim phi, g|-phi
--  | apply :and (phi :: (psi :: nil)), and-intro g|-phi g|-psi => {?}
--  | apply :or (phi :: (a :: nil)), or-intro-left g|-phi => {?}
--  | apply :or (a :: (psi :: nil)), or-intro-right g|-phi => {?}
--  | apply :==> (phi :: (psi :: nil)), impl-intro g|-phi => {?}
--  | phi, and-elim-left g|-phi => {?}
--  | phi, and-elim-right g|-phi => {?}
--  | phi, or-elim phi1 psi g|-phi1 g|-phi2 g|-phi3 => {?}
--  | phi, modus-ponens phi1 g|-phi1 g|-phi2 => {?}
--  | phi, absurd g|-phi => {?}
--  | phi, identity g => {?}

\instance IntuitionisticProp : Logic {IPL-Signature}
  | deriv-rel => IPL-Proof
  | identity gamma phi phi-in-gamma => identity phi-in-gamma
  | monotonicity => monotonicity
  | transitivity => transitivity
  | structurality => {?}