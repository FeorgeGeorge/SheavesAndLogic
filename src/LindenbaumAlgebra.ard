\import Data.Or
\import Function.Meta
\import Logic (Empty, absurd, byLeft, byRight)
\import Logic.FirstOrder.Term
\import Logic.Propositional.IntuitionisticPropCalculus \hiding (absurd)
\import Logic.Propositional.MySubset
\import Meta
\import Order.HeytingAlgebra
\import Order.Lattice
\import Relation.Equivalence
\import Set \hiding (#)

\instance LindenbaumAlgebra : HeytingAlebra LindenbaumSet
  | <= => derives'
  | <=-refl {x} =>\case\elim x \with {
    | in~ a => identity idp
  }
  | <=-transitive {x} {y} {z} =>\case\elim x, \elim y, \elim z \with {
    | in~ x, in~ y, in~ z => \lam x<=y y<=z => x<=y `simple-transit` y<=z
  }
  | <=-antisymmetric {x} {y} => \case\elim x, \elim y \with {
    | in~ x, in~ y => \lam x<=y y<=x => \lam i => ~-equiv x y (x<=y, y<=x) i
  }
  | meet => meet'
  | meet-left {x} {y} => \case\elim x,\elim y\with {
    | in~ x, in~ y => and-elim-left (identity idp)
  }
  | meet-right {x} {y} => \case\elim x,\elim y \with {
    | in~ x, in~ y => and-elim-right (identity idp)
  }
  | meet-univ {x} {y} {z} =>\case\elim x,\elim y,\elim z \with {
    | in~ x, in~ y, in~ z => \lam z<=x z<=y => and-intro z<=x z<=y
  }
  | join => join'
  | join-left {x} {y} => \case\elim x,\elim y \with {
    | in~ x, in~ y => or-intro-left (identity idp)
  }
  | join-right {x} {y} => \case\elim x,\elim y\with {
    | in~ x, in~ y => or-intro-right (identity idp)
  }
  | join-univ {x} {y} {z} => \case\elim x,\elim y, \elim z \with {
    | in~ x, in~ y, in~ z => \lam x<=z y<=z => or-elim x y (monotonicity-lemma' x<=z) (monotonicity-lemma' y<=z) (identity idp)
  }
  | bottom => in~ -bottom
  | bottom-univ {x} => \case \elim x \with {
    | in~ a => absurd (identity idp)
  }
  | implies => implies'
  | exponent-left {a} {b} {x} => \case\elim a, \elim b, \elim x \with {
    | in~ a, in~ b, in~ x => \lam a^b|-x => impl-intro (a&b-implies-a-with-b {a} {b} {x} a^b|-x)
  }
  | exponent-right {a} {b} {x} => \case\elim a, \elim b, \elim x\with {
    | in~ a, in~ b, in~ x => \lam a|-b=>x => modus-ponens b (lemma a|-b=>x) (and-elim-right (identity idp))
  }
  \where {
    \func meet' (a b : LindenbaumSet) : LindenbaumSet\elim a, b
      | in~ a, in~ b => in~ (apply :and (a :: b :: nil))
      | in~ a, ~-equiv x y (x<=y, y<=x) i => ~-equiv (apply :and (a :: x :: nil)) (apply :and (a :: y :: nil))
          (and-is-monotone x<=y, and-is-monotone y<=x) i
      | ~-equiv x y (x<=y, y<=x) i , in~ a => ~-equiv (apply :and (x :: a :: nil)) (apply :and (y :: a :: nil))
          (and-is-monotone' x<=y, and-is-monotone' y<=x) i

    \func join' (a b : LindenbaumSet) : LindenbaumSet\elim a, b
      | in~ a, in~ b => in~ (apply :or (a :: b :: nil))
      | in~ a, ~-equiv x y (x<=y, y<=x) i => ~-equiv (apply :or (a :: x :: nil)) (apply :or (a :: y :: nil))
          (or-is-monotone x<=y,
           or-is-monotone y<=x) i
      | ~-equiv x y (x<=y, y<=x) i, in~ a => ~-equiv (x -or a) (y -or a)
          (or-is-monotone' x<=y, or-is-monotone' y<=x) i

    \func implies' (a b : LindenbaumSet) : LindenbaumSet\elim a,b
      | in~ a, in~ b => in~ (-impl a b)
      | in~ a, ~-equiv x y (x<=y, y<=x) i => ~-equiv (a -impl x) (a -impl y)
          (impl-is-monotone x<=y,
           impl-is-monotone y<=x) i
      | ~-equiv x y (x<=y, y<=x) i, in~ a => ~-equiv (x -impl a) (y -impl a)
          (impl-is-antimono y<=x, impl-is-antimono x<=y)
          i

    \func a-with-b-imply-a&b {a b x : IPL-Term} : IPL-Proof (single a add b) (a -and b)
      => and-intro (identity (byLeft idp)) (identity (byRight idp))

    \func a&b-implies-a-with-b {a b x : IPL-Term} (a^b|-x : IPL-Proof (single (a -and b)) x) : IPL-Proof (single a add b) x
      => modus-ponens (a -and b) (impl-intro-general a^b|-x) (a-with-b-imply-a&b {a} {b} {x})

    \func lemma {a b x : IPL-Term} (a|-b=>x : IPL-Proof (single a) (b -impl x)) : IPL-Proof (single (a -and b)) (b -impl x)
      => modus-ponens a (impl-intro-general a|-b=>x) (and-elim-left (identity idp))
  }

\func strong-compactify (E : DecSet) (H : Bounded.Lattice E) : Lattice
  \cowith
    | E => Or H (\Sigma)
    | <= a b => \case\elim a, \elim b \with {
      | inl a, inl b => cases (E.decideEq a H.top) \with {
        | yes e => Empty
        | no n => \Sigma
      }
      | _,  inr b => \Sigma
      | inr b, inl a => Empty
    }
    | <=-refl {x} => mcases

    | <=-transitive {x} {y} {z} x<=y y<=z => mcases
    | <=-antisymmetric {x} {y} x<=y y<=z => mcases
    | meet x y => {?}
    | meet-left {x} {y} => {?}
    | meet-right => {?}
    | meet-univ => {?}
    | join => {?}
    | join-left => {?}
    | join-right => {?}
    | join-univ => {?}