\import Algebra.Domain.Euclidean
\import Data.Array
\import Logic
\import Logic.FirstOrder.Term
\import Logic.Propositional.MySubset
\import Logic.Meta
\import Paths
\import Set
\import Set.Subset

-- An "(algebraic) language or similarity type"

\class SingleSortedSignature \extends TermSig
  | Sort => \Sigma
  | arity : Symb () -> Nat
  | domain op => mkArray {Sort} {arity op} (\lam _ => ())

-- Domain of variables is universally taken as the natural numbers
-- (generally, a countable and decidable set is required)

\func Language' {L : SingleSortedSignature} {V : DecSet} => Term {L} (\lam _ => V) ()

\func var-inj {S : TermSig} {V : S -> \Set} {s : S} (a : V s) (b : V s) (eq : var {S} {V} a = var b)
  : a = b =>
  encode a (var b) eq
  \where {
    \func code (a0 : V s) (x : Term V s) : \Prop \elim x
      | var v => a0 = v
      | apply f d => Empty

    \func encode (a0 : V s) (x : Term V s) (p : var a0 = x) : code a0 x =>
      transport (code a0) p idp
  }

\func Language {L : SingleSortedSignature} => Language' {L} {NatEuclidean}

\func Context {L : SingleSortedSignature} => Set (Language {L})

\record LangHom {L : SingleSortedSignature} (\coerce fun : Language -> Language)
  | hom : \Pi (op : Symb ()) (args : DArray {arity op} (\lam _ => Language)) -> fun (apply op args) = apply op (map fun args)

\class Logic {L : SingleSortedSignature}
  | deriv-rel \alias \infix 8 ⊢ : Context -> Language -> \Prop
  | identity : \Pi (gamma : Context) (phi : Language) -> phi in' gamma -> gamma ⊢ phi
  | monotonicity : \Pi {G D : Context} -> G ⊆ D -> \Pi {phi : Language} -> G ⊢ phi -> D ⊢ phi
  | transitivity : \Pi {G D : Context} {phi : Language} -> (\Pi (psi : Language) -> psi in' G -> D ⊢ psi) -> G ⊢ phi -> D ⊢ phi
  | structurality : \Pi (subst : LangHom) (G : Context) (phi : Language) -> G ⊢ phi
  -> (\lam l => ∃ (psi : Language) (subst psi = l) (G ⊢ phi)) ⊢ subst phi